// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package usercommons.actions;

import com.mendix.core.*;
import com.mendix.logging.ILogNode;
import java.util.*;
import java.util.stream.Collectors;
import mxmodelreflection.proxies.MxObjectMember;
import mxmodelreflection.proxies.MxObjectType;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mxmodelreflection.proxies.PrimitiveTypes;
import usercommons.implementation.common.MendixUtils;
import usercommons.implementation.common.RandomPasswordGenerator;
import usercommons.implementation.exception.UserCommonsException;
import system.proxies.UserRole;
import system.proxies.UserType;
import com.mendix.systemwideinterfaces.core.*;
import system.proxies.User;
import system.proxies.UserReportInfo;
import system.proxies.TimeZone;
import system.proxies.Language;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class CreateUserRecord extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use UserProvisioning.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __UserProvisioning;
	private final usercommons.proxies.UserProvisioning UserProvisioning;
	/** @deprecated use com.mendix.utils.ListUtils.map(Claims, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __Claims;
	private final java.util.List<usercommons.proxies.UserClaim> Claims;
	/** @deprecated use com.mendix.utils.ListUtils.map(ConfigEntityAttributesList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __ConfigEntityAttributesList;
	private final java.util.List<usercommons.proxies.ClaimEntityAttribute> ConfigEntityAttributesList;
	/** @deprecated use UserInfoParameter.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __UserInfoParameter;
	private final usercommons.proxies.UserInfoParam UserInfoParameter;

	public CreateUserRecord(
		IContext context,
		IMendixObject _userProvisioning,
		java.util.List<IMendixObject> _claims,
		java.util.List<IMendixObject> _configEntityAttributesList,
		IMendixObject _userInfoParameter
	)
	{
		super(context);
		this.__UserProvisioning = _userProvisioning;
		this.UserProvisioning = _userProvisioning == null ? null : usercommons.proxies.UserProvisioning.initialize(getContext(), _userProvisioning);
		this.__Claims = _claims;
		this.Claims = java.util.Optional.ofNullable(_claims)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(claimsElement -> usercommons.proxies.UserClaim.initialize(getContext(), claimsElement))
			.collect(java.util.stream.Collectors.toList());
		this.__ConfigEntityAttributesList = _configEntityAttributesList;
		this.ConfigEntityAttributesList = java.util.Optional.ofNullable(_configEntityAttributesList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(configEntityAttributesListElement -> usercommons.proxies.ClaimEntityAttribute.initialize(getContext(), configEntityAttributesListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__UserInfoParameter = _userInfoParameter;
		this.UserInfoParameter = _userInfoParameter == null ? null : usercommons.proxies.UserInfoParam.initialize(getContext(), _userInfoParameter);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode LOG = Core.getLogger("UserCommons");
		LOG.info("Stared user creation");
		String userEntityName = getUserEntityName();
		String userPrincipalMemberName = getUserPrincipalAttribute();
		IMendixObject defaultUserRoleObject = getUserRole();
		usercommons.proxies.ClaimEntityAttribute principalConfigEntityAttribute = getPrincipalConfigEntityAttribute(
				userPrincipalMemberName);
		Map<String, usercommons.proxies.UserClaim> ClaimsMap = new HashMap<>();
		this.Claims.forEach(claims -> {
			ClaimsMap.put(claims.getName(), claims);
		});
		if (!this.UserProvisioning.getAllowCreateUsers()) {
		    LOG.warn("User creation is currently disabled due to the inactive status of the 'Allow module to Create users' setting in the Configuration. Please enable this setting to proceed with user creation");
		}
		String UserPrincipalClaimValue = getUserPrincipalClaimValue(principalConfigEntityAttribute, ClaimsMap);
		IMendixObject mxUser = getUserObject(userEntityName, userPrincipalMemberName, defaultUserRoleObject,
				UserPrincipalClaimValue);
		updateUserInfo(ClaimsMap, userPrincipalMemberName, mxUser);
		setLanguageAndTimeZone(mxUser);

		// Commit the user object
		try {
			Core.commit(getContext(), mxUser);
			mxUser = handleCustomProvisioning(mxUser);
			createOrUpdateUserReportInfo(mxUser);
			LOG.info("User Saved Successfully");

		} catch (RuntimeException e) {
			LOG.error("An error occured while trying to commit the user entity :" + UserPrincipalClaimValue);
			throw new UserCommonsException("An error occured while trying to commit the user entity.", e);
		}

		return mxUser;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateUserRecord";
	}

	// BEGIN EXTRA CODE
	/**
	 * Retrieve the entity type for the user
	 */
	private String getUserEntityName() throws UserCommonsException, com.mendix.core.CoreException {
		ILogNode LOG = Core.getLogger("UserCommons");
		MxObjectType mxObjectType = this.UserProvisioning.getUserProvisioning_CustomEntity();
		if (mxObjectType != null) {
			return mxObjectType.getCompleteName();
		}
		LOG.error("CustomUserEntity not configured");
		throw new UserCommonsException("CustomUserEntity not configured");
	}

	/**
	 * Retrieve the username attribute used for principal name comparison
	 */
	private String getUserPrincipalAttribute() throws UserCommonsException, com.mendix.core.CoreException {
		ILogNode LOG = Core.getLogger("UserCommons");
		MxObjectMember mxObjectMember = this.UserProvisioning.getUserProvisioning_PrincipalAttribute();
		if (mxObjectMember != null) {
			return mxObjectMember.getAttributeName();
		}
		LOG.error("userPrincipleMemberName not configured");
		throw new UserCommonsException("userPrincipleMemberName not configured");
	}

	/**
	 * Retrieve the user role to map to the created user
	 */
	private IMendixObject getUserRole() throws com.mendix.core.CoreException {
		UserRole role = this.UserProvisioning.getUserProvisioning_UserRole();
		IMendixObject defaultUserRoleObject = null;
		if (role != null)
			defaultUserRoleObject = role.getMendixObject();
		return defaultUserRoleObject;
	}

	/**
	 * Retrieve the configuration entity attribute for the user principal member
	 * name
	 */
	private usercommons.proxies.ClaimEntityAttribute getPrincipalConfigEntityAttribute(
			final String finalUserPrincipleMemberName) {
		return ConfigEntityAttributesList.stream().filter(configEntityAttributes -> {
			try {
				return configEntityAttributes.getClaimEntityAttribute_EntityAttribute().getAttributeName()
						.equals(finalUserPrincipleMemberName);
			} catch (CoreException e) {
				return false;
			}
		}).findFirst().orElse(null);
	}
	/**
	 * Retrieve the user principal claim value
	 */
	private String getUserPrincipalClaimValue(usercommons.proxies.ClaimEntityAttribute principalConfigEntityAttribute,
			Map<String, usercommons.proxies.UserClaim> ClaimsMap)
			throws UserCommonsException, com.mendix.core.CoreException {
		ILogNode LOG = Core.getLogger("UserCommons");
		String UserPrincipalClaimName = principalConfigEntityAttribute.getClaimEntityAttribute_Claim().getName();
		usercommons.proxies.UserClaim claim = ClaimsMap.get(UserPrincipalClaimName);
		if (claim != null) {
			//extract the claimValue and substring it if it is greater than the maximum length of the attribute
			int maxLength=  principalConfigEntityAttribute.getClaimEntityAttribute_EntityAttribute().getFieldLength();
			 String claimValue = claim.getValue();
		    if (claimValue.length() > maxLength) {
		    	 LOG.warn("Total length of PrincipalClaimValue is" + claimValue.length() + "so truncating the value based on the maximum field length i.e" +maxLength);					
		    	 return claimValue.substring(0, maxLength);		      
		    }
		    else 
		    {
		    return claimValue ;
		    }					
		}
		
		LOG.error("user Principal claim " + UserPrincipalClaimName + "value is empty");
		throw new UserCommonsException("user Principal claim " + UserPrincipalClaimName
				+ "value is empty , Please select the Principal claim which contains value ");

	}
	/**
	 * finding the user based on the principle name
	 */
	private IMendixObject getUserObject(String userEntityName, String userPrincipalMemberName,
			IMendixObject defaultUserRoleObject, String UserPrincipalClaimValue) throws UserCommonsException {
		
		List<IMendixObject> mxUserObjectList = MendixUtils.retrieveFromDatabase(
			    getContext(), 
			    "//%s[%s=$Username or (%s)=$UsernameSmall]", 
			    new HashMap<String, Object>(){{
			    	put("Username" , UserPrincipalClaimValue);
			    	put("UsernameSmall" , UserPrincipalClaimValue.toLowerCase());    	
			    }}, 
			    userEntityName, 
			    userPrincipalMemberName, 
			    userPrincipalMemberName
			);

		List<IMendixObject> mxUserObjectActualList = mxUserObjectList.stream()
				.filter(mxUser -> UserPrincipalClaimValue
						.equalsIgnoreCase(mxUser.getValue(getContext(), userPrincipalMemberName)))
				.collect(Collectors.toList());
		IMendixObject mxUser = null;
		// We have exactly 1 match, use the one we find
		if (mxUserObjectActualList.size() == 1) {
			// success!
			mxUser = mxUserObjectActualList.get(0);
		} else if (mxUserObjectList.size() > 1) {
			/*
			 * We have multiple users that match the criteria This obviously can't happen
			 * for username, but since we facilitate searching on fields such as fullname,
			 * email phone, multiple matches are possible
			 */
			List<User> userList = new ArrayList<User>();
			for (IMendixObject obj : mxUserObjectList) {
				userList.add(User.initialize(getContext(), obj));
			}

			User user = usercommons.proxies.microflows.Microflows.evaluateMultipleUserMatches(getContext(),
					this.UserInfoParameter, userList);
			if (user != null) {
				mxUser = user.getMendixObject();
			} else {
				String errorMessage = "evaluateMultipleUserMatches implementation failed to return User from List of Users ";
				throw new UserCommonsException(errorMessage);
			}

		} else if (this.UserProvisioning.getAllowCreateUsers()) {
			mxUser = createUser(userEntityName, userPrincipalMemberName, defaultUserRoleObject,
					UserPrincipalClaimValue);
		} else {
			String errorMessage = "User lookup of '" + userPrincipalMemberName
					+ "' failed, this user principal does not exist in the Mx database.";
			throw new UserCommonsException(errorMessage);
		}
		return mxUser;
	}
	/**
	 * Create User based on Configuration
	 */
	private IMendixObject createUser(String userEntityName, String userPrincipleMemberName,
			IMendixObject defaultUserRoleObject, String UserPrincipleClaimValue) {
		IMendixObject mxUser;
		ILogNode LOG = Core.getLogger("UserCommons");
		mxUser = Core.instantiate(getContext(), userEntityName);
		String name = UserPrincipleClaimValue.length() > 100 ? UserPrincipleClaimValue.substring(0,100): UserPrincipleClaimValue ;
		mxUser.setValue(getContext(), User.MemberNames.Name.toString(), name.toLowerCase());
		mxUser.setValue(getContext(), userPrincipleMemberName, UserPrincipleClaimValue.toLowerCase());
		mxUser.setValue(getContext(), User.MemberNames.Password.toString(),
				RandomPasswordGenerator.generatePswd(15, 20, 4, 4, 4));

		if (defaultUserRoleObject != null) {
			List<IMendixIdentifier> userroles = new ArrayList<IMendixIdentifier>();
			userroles.add(defaultUserRoleObject.getId());
			mxUser.setValue(getContext(), User.MemberNames.UserRoles.toString(), userroles);
			LOG.info("Associated userrole :"
					+ defaultUserRoleObject.getValue(getContext(), UserRole.MemberNames.Name.toString()));
		}
		return mxUser;
	}

	/**
	 * Create the UserReportInfo object when there is no UserReportInfo object with
	 * User Update UserType in first UserReportInfo object of list when there is no
	 * UserType of UserReportInfo object with User
	 * 
	 * @param mxUser
	 * @throws CoreException
	 */
	private void createOrUpdateUserReportInfo(IMendixObject mxUser) throws CoreException {
		UserType userType = this.UserProvisioning.getUserType();

		if (userType != null) {
			List<IMendixObject> mxUserTypes = MendixUtils.retrieveFromDatabase(getContext(), "//%s[%s/%s=%s]",
					new HashMap<String, Object>(), UserReportInfo.entityName,
					UserReportInfo.MemberNames.UserReportInfo_User, User.entityName, mxUser.getId().toLong());
			if (mxUserTypes != null && !mxUserTypes.isEmpty()) {
				if (!mxUserTypes.stream().anyMatch(mxUserType -> userType.name()
						.equals(mxUserType.getValue(getContext(), UserReportInfo.MemberNames.UserType.toString())))) {
					IMendixObject mxUserType = mxUserTypes.get(0);
					UserReportInfo userReportInfo = UserReportInfo.initialize(getContext(), mxUserType);
					userReportInfo.setUserType(userType);
					userReportInfo.commit();
				}
			} else {
				IMendixObject mxUserType = Core.instantiate(getContext(), UserReportInfo.entityName);
				UserReportInfo userReportInfo = UserReportInfo.initialize(getContext(), mxUserType);
				userReportInfo.setUserType(userType);
				userReportInfo.setUserReportInfo_User(User.initialize(getContext(), mxUser));
				userReportInfo.commit();
			}
		}

	}
	/**
	 * Update User based on Configuration
	 */
	private void updateUserInfo(Map<String, usercommons.proxies.UserClaim> ClaimsMap, String userPrincipalMemberName,
			IMendixObject mxUser) throws UserCommonsException {
		ILogNode LOG = Core.getLogger("UserCommons");
		for (usercommons.proxies.ClaimEntityAttribute mxClaim : ConfigEntityAttributesList) {

			try {
				MxObjectMember mxobjectMember = mxClaim.getClaimEntityAttribute_EntityAttribute();
				String claimName = mxClaim.getClaimEntityAttribute_Claim().getName();

				if (ClaimsMap.containsKey(claimName)) {
					usercommons.proxies.UserClaim claim = ClaimsMap.get(claimName);
					// Do not update the user principal value
					if (userPrincipalMemberName.equals(mxobjectMember.getAttributeName())) {
						continue;
					}
					if (PrimitiveTypes.DateTime.equals(mxobjectMember.getAttributeTypeEnum())) {
						mxUser.setValue(getContext(), mxobjectMember.getAttributeName(), claim.getDateValue());
					} else {
						mxUser.setValue(getContext(), mxobjectMember.getAttributeName(), claim.getValue());
					}
					LOG.debug(String.format("%s is updated with  %s in user", claimName,claim.getValue()));
				} else {
					LOG.info(String.format("%s claim does not contain a value", claimName));
				}
			} catch (CoreException e) {
				LOG.error("An error occured while trying to update the user entity with claims",
						new RuntimeException(e.getCause()));
				throw new UserCommonsException("An error occured while trying to update the user entity with claims");

			}

		}
	}

	/**
	 * set Language and TimeZone
	 */
	private void setLanguageAndTimeZone(IMendixObject mxUser) throws CoreException {
		String languageValue = UserInfoParameter.getLangCode();
		String timeZoneValue = UserInfoParameter.getTimezoneCode();
		User user = User.initialize(getContext(), mxUser);
		setTimezoneForUser(user, timeZoneValue);
		setLanguageForUser(user, languageValue);
	}
	/**
	 * set Default TimeZone ,if the timezone is not Provided 
	 */
	private void setTimezoneForUser(User user, String timezoneCode) throws CoreException {
		
		if( timezoneCode != null) {
			List<TimeZone> timeZones = TimeZone.load(getContext(), String.format("[Code='%s']", timezoneCode));
			if (timeZones != null && !timeZones.isEmpty()) {
				user.setUser_TimeZone(timeZones.get(0));
			}	
		}
		
		if(user.getUser_TimeZone() == null) {
			List<TimeZone> defaultTimeZone = TimeZone.load(getContext(), "[Code='America/New_York']");
			if (defaultTimeZone != null && !defaultTimeZone.isEmpty()) {
	        user.setUser_TimeZone(defaultTimeZone.get(0));
			}
	    }
	}
	/**
	 * set Default Language ,if the language is not Provided
	 */
	private void setLanguageForUser( User user, String languageCode) throws CoreException {
		if(languageCode != null) {
			List<Language> langs = Language.load(getContext(), String.format("[Code='%s']", languageCode));
		    if (langs != null && !langs.isEmpty()) {
		        user.setUser_Language(langs.get(0));
		    }	
		}
	    
	    if(user.getUser_Language() == null) {
	    	List<Language> defaultLanguage =Language.load(getContext(), "[Code='en_US']");
	        if (defaultLanguage != null && !defaultLanguage.isEmpty()) {
	        user.setUser_Language(defaultLanguage.get(0));
	        }
	    }
	}
	/**
	 * Handles custom provisioning logic for a given Mendix user object.
     * If custom user provisioning is defined, executes the associated microflow with the necessary parameters.
	 */
	private IMendixObject handleCustomProvisioning(IMendixObject mxUser) throws com.mendix.core.CoreException {
		mxmodelreflection.proxies.Microflows customUserProvisioning = this.UserProvisioning
				.getUserProvisioning_CustomUserProvisioning();
		if (customUserProvisioning != null) {
			return Core.microflowCall(customUserProvisioning.getCompleteName()).inTransaction(true)
					.withParam("UserInfoParameter", UserInfoParameter.getMendixObject())
					.withParam("User", User.initialize(getContext(), mxUser).getMendixObject()).execute(getContext());
		}
		return mxUser;
	}
	// END EXTRA CODE
}
